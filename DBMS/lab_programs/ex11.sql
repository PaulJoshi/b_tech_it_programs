-- 1. Create a function which returns the manager name of an employee, given the EmpId.

CREATE TABLE EMPLOYEE_FUNC(
	EMPID VARCHAR2(5) PRIMARY KEY,
	EMPNAME VARCHAR2(20),
	JOB VARCHAR2(20),
	MANAGER VARCHAR2(5),
	DEPTNO VARCHAR2(5),
	HIREDATE DATE,
	SALARY NUMBER(7,1),
	COMMISSION NUMBER
);

INSERT INTO EMPLOYEE_FUNC VALUES('E0001', 'ABEY', 'TESTER', 'E0004', 'D004', '15-DEC-12', 30000, 525);
INSERT INTO EMPLOYEE_FUNC VALUES('E0002', 'JESTO', 'ANALYST', 'E0001', 'D002', '24-APR-11', 25000, 683);
INSERT INTO EMPLOYEE_FUNC VALUES('E0003', 'ADARSH', 'SENIOR CLERK', 'E0004', 'D004', '10-JAN-13', 15000, 525);
INSERT INTO EMPLOYEE_FUNC VALUES('E0004', 'BONY', 'MANAGER', 'E0002', 'D001', '11-APR-11', 50000, 1103);
INSERT INTO EMPLOYEE_FUNC VALUES('E0005', 'ELLE', 'ANALYST', 'E0001', 'D002', '5-JUN-11', 40000, 590);
INSERT INTO EMPLOYEE_FUNC VALUES('E0006', 'MANU', 'SUPPLIER', 'E0001', 'D003', '19-JUN-13', 50000, 473);

CREATE OR REPLACE FUNCTION FINDMANAGER(ID IN VARCHAR2)
RETURN VARCHAR2
IS
	NAME VARCHAR2(20);
	MID VARCHAR2(5);
	FLAG VARCHAR2(1) := '0';
BEGIN 
	SELECT MANAGER INTO MID FROM EMPLOYEE_FUNC WHERE EMPLOYEE_FUNC.EMPID=ID;
	DBMS_OUTPUT.PUT_LINE('MANAGER ID = '  ||  MID);
	SELECT EMPNAME INTO NAME FROM EMPLOYEE_FUNC WHERE EMPLOYEE_FUNC.EMPID=MID;
RETURN NAME;
EXCEPTION 
WHEN NO_DATA_FOUND
THEN
	DBMS_OUTPUT.PUT_LINE('NO DATA FOUND FOR EMPLOYEE ID: '  ||  ID);
	RETURN FLAG;
END;
/

DECLARE 
ID VARCHAR2(5) := &ID;
MID VARCHAR2(5);
MNAME VARCHAR2(20);
BEGIN	
	DBMS_OUTPUT.PUT_LINE('EMPLOYEE ID = '  ||  ID);
	MNAME := FINDMANAGER(ID);
	IF MNAME = '0' THEN 
		DBMS_OUTPUT.PUT_LINE('==> MANAGER NAME CAN NOT BE FOUND!');
	ELSE
		DBMS_OUTPUT.PUT_LINE('MANAGER NAME = '  ||  MNAME);
	END IF;
END;
/


-- 2. Sales of two different products in 1 week is recorded
--      Product (product_id, product_name, grade)
--      Sales (product_id, sales, sales_date, sales_day)
-- Do the following:
--      1. Write a function that retrieves the product name and grade of a product with the given product_id.
--      2. Whenever the sum of the sales of a particular product becomes greater than a target
--          value it is given an A grade. If there is no sale for a product, an exception is to be raised
--          and no more sales for that product should be allowed. Sales are not allowed on Sundays.

CREATE TABLE PRODUCT(
	PRODUCT_ID NUMBER(3) PRIMARY KEY,
	PRODUCT_NAME VARCHAR2(50),
	GRADE VARCHAR2(1)
);

INSERT INTO PRODUCT VALUES(401, 'KNOR', 'A');
INSERT INTO PRODUCT VALUES(402, 'AEROSOL', 'B');
INSERT INTO PRODUCT VALUES(403, 'OREO', 'B');
INSERT INTO PRODUCT VALUES(404, 'KRISPS', 'B');
INSERT INTO PRODUCT VALUES(405, 'HAZELLA', 'C');

CREATE TABLE SALES(
	PRODUCT_ID NUMBER(3) PRIMARY KEY,
	SALES NUMBER(6),
	SALES_DATE DATE,
	SALES_DAY VARCHAR2(10)
);

INSERT INTO SALES VALUES(401, 10010, '24-JUN-2021', 'SUNDAY');
INSERT INTO SALES VALUES(402, 9999, '12-MAR-2021', 'SATURDAY');
INSERT INTO SALES VALUES(403, 12000, '25-APR-2021', 'MONDAY');
INSERT INTO SALES VALUES(404, 0, '29-DEC-2020', 'WEDNESDAY');
INSERT INTO SALES VALUES(405, 8740, '17-FEB-2021', 'FRIDAY');


CREATE OR REPLACE FUNCTION PRODUCTDETAILS(ID NUMBER)
RETURN NUMBER
IS
	FLAG NUMBER(1);
	NAME VARCHAR2(50);
	G VARCHAR2(1);
BEGIN
	FLAG := 0;
	SELECT PRODUCT_NAME, GRADE INTO NAME, G FROM PRODUCT WHERE PRODUCT.PRODUCT_ID = ID;
	DBMS_OUTPUT.PUT_LINE('PRODUCT ID = ' || ID);
	DBMS_OUTPUT.PUT_LINE('PRODUCT NAME = ' || NAME);
	DBMS_OUTPUT.PUT_LINE('PRODUCT GRADE =' || G);
	FLAG := 1;
RETURN FLAG;
EXCEPTION
WHEN NO_DATA_FOUND 
THEN 
	FLAG := 0;
	DBMS_OUTPUT.PUT_LINE('PRODUCT NOT FOUND!');
	RETURN FLAG;
END;
/

DECLARE
	PID NUMBER(3) := &PID;
	FLAGFOUND NUMBER(1);
	PRDCT_NOT_FOUND EXCEPTION;
BEGIN
	FLAGFOUND := PRODUCTDETAILS(PID);
	IF FLAGFOUND = 0 THEN
		RAISE PRDCT_NOT_FOUND;
	END IF;
EXCEPTION
WHEN PRDCT_NOT_FOUND
THEN 
	DBMS_OUTPUT.PUT_LINE('==> PRODUCT NAME AND GRADE CAN NOT BE FOUND !');
END;
/


b)

CREATE OR REPLACE FUNCTION PRODUCTSALE(ID NUMBER, TARGET NUMBER)
RETURN NUMBER
IS
	FLAG NUMBER(5);
	DAY VARCHAR2(10);
	AMOUNT NUMBER(6);
	G VARCHAR2(1);
	NO_MORE_SALES EXCEPTION;
BEGIN
	FLAG := 0;
	SELECT SALES,SALES_DAY INTO AMOUNT, DAY FROM SALES WHERE SALES.PRODUCT_ID = ID;
	DBMS_OUTPUT.PUT_LINE('SALES AMOUNT = ' || AMOUNT);
	DBMS_OUTPUT.PUT_LINE('SALES DAY = ' || DAY);
	FLAG := 1;
	IF DAY = 'SUNDAY' THEN
		DBMS_OUTPUT.PUT_LINE('ERROR: SALES NOT ALLOWED ON SUNDAY !');
	ELSE
		IF(AMOUNT>TARGET) THEN
			UPDATE PRODUCT SET GRADE='A' WHERE PRODUCT.PRODUCT_ID = ID;
			DBMS_OUTPUT.PUT_LINE('SALES > TARGET_VALUE : GRADE UPDATED TO "A" IN THE TABLE !');
		ELSIF AMOUNT = 0 THEN
			RAISE NO_MORE_SALES;
		END IF;
	END IF;
RETURN FLAG;
EXCEPTION
WHEN NO_DATA_FOUND
THEN
	RETURN FLAG;
WHEN NO_MORE_SALES
THEN 
	DBMS_OUTPUT.PUT_LINE('NO MORE SALES FOR PRODUCT WITH PRODUCT ID:' || ID || ' IS ALLOWED !');
	RETURN FLAG;
END;
/

DECLARE
	PRODUCT_ID NUMBER(3) := &PRODUCT_ID;
	TARGET_VALUE NUMBER(6) := &TARGET_VALUE;
	FLAGFOUND NUMBER(1);
BEGIN
	FLAGFOUND := PRODUCTSALE(PRODUCT_ID,TARGET_VALUE);
	IF FLAGFOUND = 0 THEN
		DBMS_OUTPUT.PUT_LINE('DATA FOR PRODUCT WITH PRODUCT ID:' || PRODUCT_ID || ' IS NOT FOUND !');
	END IF;
END;
/


-- 3. Consider a database that contains the following tables:
-- Candidate (cand-id, cand-name, party)
-- Voters (voter-id, voter-name)
-- Voted (cand-id, party, voter-id)
--  a) Write a program to ensure that only valid voters are permitted to vote.
--  b) Write a function which calculates the total number of votes of a particular candidate.
--  c) Write a procedure which count the votes and declare the winner.

CREATE TABLE CANDIDATE(
	CAND_ID NUMBER PRIMARY KEY,
	CAND_NAME VARCHAR2(20),
	PARTY VARCHAR2(20)
);

INSERT INTO CANDIDATE VALUES(301, 'RAJ', 'XYZ');
INSERT INTO CANDIDATE VALUES(302, 'LATHIKA', 'ABC');
INSERT INTO CANDIDATE VALUES(303, 'AJMAL', 'PQR');
INSERT INTO CANDIDATE VALUES(304, 'LAL', 'HIJ');
INSERT INTO CANDIDATE VALUES(305, 'RENU', 'RST');

CREATE TABLE VOTERS(
	VOTER_ID NUMBER PRIMARY KEY,
	VOTER_NAME VARCHAR2(20)
);

INSERT INTO VOTERS VALUES(701, 'PAUL');
INSERT INTO VOTERS VALUES(702, 'ANTONY');
INSERT INTO VOTERS VALUES(703, 'ELOISE');
INSERT INTO VOTERS VALUES(704, 'SIMON');
INSERT INTO VOTERS VALUES(705, 'ROSE');
INSERT INTO VOTERS VALUES(706, 'COLIN');
INSERT INTO VOTERS VALUES(707, 'SIENA');
INSERT INTO VOTERS VALUES(708, 'TRUMAN');

CREATE TABLE VOTED(
	CAND_ID NUMBER,
	PARTY VARCHAR2(20),
	VOTER_ID NUMBER
);

INSERT INTO VOTED VALUES(301, 'XYZ', 701);
INSERT INTO VOTED VALUES(303, 'PQR', 702);
INSERT INTO VOTED VALUES(302, 'ABC', 703);
INSERT INTO VOTED VALUES(303, 'PQR', 704);
INSERT INTO VOTED VALUES(302, 'ABC', 705);
INSERT INTO VOTED VALUES(305, 'RST', 706);
INSERT INTO VOTED VALUES(302, 'ABC', 707);
INSERT INTO VOTED VALUES(304, 'HIJ', 708);

a)

CREATE OR REPLACE FUNCTION CHECKVALIDITY(ID IN NUMBER)
RETURN NUMBER
IS
	IDFLAG NUMBER := 0;
BEGIN
	SELECT VOTER_ID INTO IDFLAG FROM VOTERS WHERE VOTERS.VOTER_ID = ID;
RETURN IDFLAG;
EXCEPTION
WHEN NO_DATA_FOUND
THEN 
	RETURN IDFLAG;
END;
/	

DECLARE
	ENTER_ID NUMBER := &ENTER_ID;
	FLAGFOUND NUMBER;
BEGIN
	FLAGFOUND := CHECKVALIDITY(ENTER_ID);
	IF FLAGFOUND = 0 THEN
		DBMS_OUTPUT.PUT_LINE('INVALID VOTER : NOT PERMITTED TO VOTE !');
	ELSE
		DBMS_OUTPUT.PUT_LINE('VALID VOTER : PERMITTED TO VOTE !');
	END IF;
END;
/


b)

CREATE TABLE COUNTVOTES(
	CAND_ID NUMBER,
	VOTES NUMBER
);

CREATE OR REPLACE PROCEDURE TOTALVOTES(NAME IN VARCHAR2, ID IN NUMBER)
	VOTES NUMBER := 0;
	CURSOR C IS SELECT * FROM VOTED; 
BEGIN
	FOR S IN C LOOP
		IF S.CAND_ID = ID THEN
			VOTES := VOTES + 1;
		END IF;
	END LOOP;
RETURN VOTES;
EXCEPTION 
WHEN NO_DATA_FOUND THEN 
	RETURN VOTES;
END;
/

DECLARE 
	COUNT_ID NUMBER;
	COUNT_VOTES NUMBER;
	CURSOR C IS SELECT * FROM CANDIDATE;
BEGIN
	FOR S IN C
	LOOP
		COUNT_VOTES := TOTALVOTES(S.CAND_NAME, S.CAND_ID);
		DBMS_OUTPUT.PUT_LINE(' CANDIDATE ID : ' || S.CAND_ID || '          CANDIDATE NAME : ' || S.CAND_NAME || '          VOTES  :' || COUNT_VOTES);
		INSERT INTO COUNTVOTES VALUES(S.CAND_ID,COUNT_VOTES);
	END LOOP;
END;
/	


c)

CREATE OR REPLACE PROCEDURE FINDMAXVOTES(WINNER_VOTE IN OUT COUNTVOTES.VOTES%TYPE) AS
CURSOR IS SELECT * FROM COUNTVOTES;
BEGIN
	FOR S IN C
	LOOP
		IF(S.VOTES>WINNER_VOTE) THEN
			WINNER_VOTE := S.VOTES;
		END IF;
	END LOOP;	
END;
/

DECLARE
	WINNER_VOTE NUMBER;
	WINNER_ID NUMBER;
	WINNER_NAME VARCHAR2(20);
	WINNER_PARTY VARCHAR2(20);
BEGIN
	WINNER_VOTE := 0;
	FINDMAXVOTES(WINNER_VOTE);
	SELECT CAND_ID INTO WINNER_ID FROM COUNTVOTES WHERE COUNTVOTES.VOTES = WINNER_VOTE;
	SELECT CAND_NAME INTO WINNER_NAME FROM CANDIDATE WHERE CANDIDATE.CAND_ID = WINNER_ID;
	SELECT PARTY INTO WINNER_PARTY FROM CANDIDATE WHERE CANDIDATE.CAND_ID = WINNER_ID;
	DBMS_OUTPUT.PUT_LINE('THE WINNER IS :-');
	DBMS_OUTPUT.PUT_LINE('.               ID : ' || WINNER_ID || '         NAME : ' || WINNER_NAME || '         VOTES : ' || WINNER_VOTE);
END;
/

SELECT CAND_ID FROM VOTED GROUP BY CAND_ID ORDER BY COUNT(CAND_ID) DESC;